# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/inputmethod/imf/inputmethod.gni")
import("//build/ohos.gni")

config("inputmethod_ability_native_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/include",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/include",
    "${inputmethod_path}/frameworks/common",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller/include",
    "${inputmethod_path}/services/include",
  ]
}
config("inputmethod_ability_native_public_config") {
  visibility = [ "./*" ]
  include_dirs = [
    "include",
    "${inputmethod_path}/common/include",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/include",
    "${inputmethod_path}/frameworks/common",
    "${inputmethod_path}/frameworks/services/json/include",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller/include",
    "${inputmethod_path}/services/include",
  ]
}

ohos_shared_library("inputmethod_ability") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    integer_overflow = true
    ubsan = true
  }
  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_ability.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_ability_interface.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_ability_utils.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_core_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_panel.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/task_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/tasks/task.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/window_change_listener_impl.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_data_channel_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_system_ability_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/keyevent_consumer_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/system_cmd_channel_proxy.cpp",
    "${inputmethod_path}/services/src/input_control_channel_proxy.cpp",
    "${inputmethod_path}/services/src/sys_cfg_parser.cpp",
  ]
  cflags_cc = [
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
    "-Wno-c99-designator",
  ]
  version_script = "inputmethod_ability.versionscript"

  configs = [ ":inputmethod_ability_native_config" ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwsutils",
  ]

  public_external_deps = [ "window_manager:libwm" ]

  deps = [
    "${inputmethod_path}/common:inputmethod_common",
    "${inputmethod_path}/common/imf_hisysevent:imf_hisysevent",
    "${inputmethod_path}/services/file:imf_file_static",
    "${inputmethod_path}/services/json:imf_json_static",
  ]

  public_configs = [ ":inputmethod_ability_native_public_config" ]

  subsystem_name = "inputmethod"
  innerapi_tags = [ "platformsdk" ]
  part_name = "imf"
}

ohos_static_library("inputmethod_ability_static") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_ability.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_ability_interface.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_ability_utils.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_core_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_panel.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/task_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/tasks/task.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/window_change_listener_impl.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_data_channel_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/input_method_system_ability_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/keyevent_consumer_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/system_cmd_channel_proxy.cpp",
    "${inputmethod_path}/services/src/input_control_channel_proxy.cpp",
    "${inputmethod_path}/services/src/sys_cfg_parser.cpp",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwsutils",
  ]

  public_external_deps = [ "window_manager:libwm" ]

  deps = [
    "${inputmethod_path}/common:inputmethod_common",
    "${inputmethod_path}/common/imf_hisysevent:imf_hisysevent",
    "${inputmethod_path}/services/file:imf_file_static",
    "${inputmethod_path}/services/json:imf_json_static",
  ]

  public_configs = [ ":inputmethod_ability_native_public_config" ]

  subsystem_name = "inputmethod"
  part_name = "imf"
}
