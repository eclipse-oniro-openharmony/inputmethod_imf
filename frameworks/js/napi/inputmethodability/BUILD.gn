# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/inputmethod/imf/inputmethod.gni")
import("//build/ohos.gni")

config("inputmethodengine_native_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "${inputmethod_path}/common/include",
    "${inputmethod_path}/frameworks/common",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/include",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/include",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller/include",
  ]
  ldflags = [ "-Wl,--exclude-libs=ALL" ]
  cflags_cc = [
    "-fvisibility=hidden",
    "-fvisibility-inlines-hidden",
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]
}

config("inputmethodengine_native_public_config") {
  visibility = [ "./*" ]
  include_dirs = [
    "include",
    "${inputmethod_path}/common/include",
    "${inputmethod_path}/frameworks/common",
    "${inputmethod_path}/frameworks/js/napi/inputmethodclient",
    "${inputmethod_path}/frameworks/js/napi/inputmethodability",
  ]
}

ohos_shared_library("inputmethodengine") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    integer_overflow = true
    ubsan = true
  }
  sources = [
    "${inputmethod_path}/frameworks/js/napi/inputmethodclient/async_call.cpp",
    "${inputmethod_path}/frameworks/js/napi/inputmethodclient/js_utils.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/src/keyevent_consumer_proxy.cpp",
    "input_method_engine_module.cpp",
    "js_input_method_engine_setting.cpp",
    "js_keyboard_controller_engine.cpp",
    "js_keyboard_delegate_setting.cpp",
    "js_panel.cpp",
    "js_text_input_client_engine.cpp",
    "panel_listener_impl.cpp",
  ]

  configs = [ ":inputmethodengine_native_config" ]

  deps = [
    "${inputmethod_path}/common:inputmethod_common",
    "${inputmethod_path}/frameworks/js/napi/common:inputmethod_js_common",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/services/json:imf_json_static",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_runtime:ability_context_native",
    "ability_runtime:abilitykit_native",
    "ability_runtime:extensionkit_native",
    "ability_runtime:napi_base_context",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "input:libmmi-client",
    "input:libmmi-napi",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "napi:ace_napi",
    "window_manager:libwm_lite",
  ]

  public_configs = [ ":inputmethodengine_native_public_config" ]

  defines = []
  if (window_manager_use_sceneboard) {
    defines += [ "SCENE_BOARD_ENABLE" ]
  }

  relative_install_dir = "module"
  subsystem_name = "inputmethod"
  part_name = "imf"
}
