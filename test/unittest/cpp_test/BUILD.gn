# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/inputmethod/imf/inputmethod.gni")
import("//build/test.gni")

config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${inputmethod_path}/frameworks/ndk/include",
    "${inputmethod_path}/interfaces/kits/c",
    "${inputmethod_path}/services/include",
    "${inputmethod_path}/test/common",
    "${inputmethod_path}/services/adapter/settings_data_provider/common/include",
  ]
}

module_output_path = "imf/cpp"

ohos_unittest("InputMethodControllerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/services/src/input_type_manager.cpp",
    "src/ime_event_monitor_manager_test.cpp",
    "src/input_method_controller_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodAttachTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_attach_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/services/json:imf_json_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "input:libmmi-client",
    "napi:ace_napi",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}
ohos_unittest("InputMethodAbilityTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_core_proxy.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_core_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/task_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/tasks/task.cpp",
    "${inputmethod_path}/services/src/input_control_channel_proxy.cpp",
    "src/input_method_ability_exception_test.cpp",
    "src/input_method_ability_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/services/json:imf_json_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "memmgr:memmgrclient",
    "napi:ace_napi",
    "os_account:os_account_innerkits",
    "window_manager:libdm",
    "window_manager:libwsutils",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodServiceTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_service_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodDfxTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_dfx_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/common:inputmethod_common",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hisysevent:libhisyseventmanager",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodPanelTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_panel_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "input:libmmi-client",
    "napi:ace_napi",
    "os_account:os_account_innerkits",
    "window_manager:libdm",
    "window_manager:libwsutils",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodPanelAdjustTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_panel_adjust_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "input:libmmi-client",
    "napi:ace_napi",
    "window_manager:libdm",
    "window_manager:libwsutils",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodSwitchTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_switch_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/services/adapter/settings_data_provider:settings_data_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "input:libmmi-client",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("ITypesUtilTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/task_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/tasks/task.cpp",
    "${inputmethod_path}/services/src/input_control_channel_proxy.cpp",
    "src/input_method_ability_exception_test.cpp",
    "src/itypes_util_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
  ]
}

ohos_unittest("InputMethodPrivateMemberTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_agent_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/input_method_core_stub.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/task_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/tasks/task.cpp",
    "${inputmethod_path}/services/adapter/ime_connection_manager/src/ime_connection.cpp",
    "${inputmethod_path}/services/src/input_control_channel_proxy.cpp",
    "src/input_method_private_member_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "napi:ace_napi",
    "os_account:os_account_innerkits",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("InputMethodEditorTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/input_method_editor_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/services/json:imf_json_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("NewImeSwitchTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/newIme_switch_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/services/adapter/settings_data_provider:settings_data_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "input:libmmi-client",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("IdentityCheckerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/services/adapter/ime_connection_manager/src/ime_connection.cpp",
    "src/identity_checker_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("TextListenerInnerApiTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/text_listener_inner_api_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("ImeProxyTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/ime_proxy_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "${inputmethod_path}/test/unittest/resource/bundle_dependencies/editorBox:editorBox",
    "${inputmethod_path}/test/unittest/resource/bundle_dependencies/extImfBundle:extImf",
    "${inputmethod_path}/test/unittest/resource/ohos_test:copy_ohos_test",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("TaskManagerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/task_manager.cpp",
    "${inputmethod_path}/frameworks/native/inputmethod_ability/src/tasks/task.cpp",
    "src/task_manager_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
  ]
}

ohos_unittest("ImeFreezeManagerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/ime_freeze_manager_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("JsonOperateTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/json_operate_test.cpp" ]

  deps = [
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/services/adapter/settings_data_provider:settings_data_static",
    "${inputmethod_path}/services/json:imf_json_static",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "ipc:ipc_single",
    "resource_management:global_resmgr",
  ]
}

ohos_unittest("VirtualListenerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path

  sources = [ "src/virtual_listener_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}
ohos_unittest("ImeSystemChannelTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [ "src/ime_system_channel_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

if (defined(build_seccomp) && build_seccomp) {
  ohos_unittest("InputMethodSeccompTest") {
    module_out_path = module_output_path
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      blocklist = "./inputmethod_blocklist.txt"
    }
    sources = [ "src/input_method_ext_seccomp_test.cpp" ]
    external_deps = [ "init:seccomp" ]
  }
} else {
  group("InputMethodSeccompTest") {
  }
}

ohos_unittest("ImeControllerCpaiTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "src/inputmethod_controller_capi_test.cpp",
    "src/native_text_changed_listener_test.cpp",
  ]
  include_dirs = [
    "${inputmethod_path}/interfaces/kits/c",
    "${inputmethod_path}/frameworks/ndk/include",
  ]

  deps = [
    "${inputmethod_path}/frameworks/ndk:ohinputmethod",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
  ]

  external_deps = [
    "googletest:gtest_main",
    "input:libmmi-client",
  ]
}

ohos_unittest("FullImeInfoManagerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/services/src/full_ime_info_manager.cpp",
    "mock/ime_enabled_info_manager.cpp",
    "mock/ime_info_inquirer.cpp",
    "src/full_ime_info_manager_test.cpp",
  ]
  include_dirs = [
    "${inputmethod_path}/common/include",
    "${inputmethod_path}/frameworks/native/inputmethod_controller/include",
    "${inputmethod_path}/test/unittest/cpp_test/mock",
  ]

  deps = [ "${inputmethod_path}/common:inputmethod_common" ]

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
  ]
}

ohos_unittest("InputMethodMessageHandlerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/services/src/input_type_manager.cpp",
    "src/input_method_message_handler_test.cpp",
  ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/frameworks/ndk:ohinputmethod_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_ability:inputmethod_ability_static",
    "${inputmethod_path}/interfaces/inner_api/inputmethod_controller:inputmethod_client_static",
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/test/common:inputmethod_test_common",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",
  ]

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}

ohos_unittest("OnDemandStartStopSaTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./inputmethod_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [
    "${inputmethod_path}/common/src/on_demand_start_stop_sa.cpp",
    "src/on_demand_start_stop_sa_test.cpp",
  ]
  include_dirs = [
    "${inputmethod_path}/common/include",
    "mock/",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("ImfHisysEventReporterTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path
  include_dirs = [ "${inputmethod_path}/common/include" ]
  sources = [ "src/imf_hisysevent_report_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${inputmethod_path}/common/imf_hisysevent:imf_hisysevent",
    "${inputmethod_path}/services/json:imf_json_static",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hisysevent:libhisyseventmanager",
  ]
}

ohos_unittest("ImeEnabledInfoManagerTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_output_path
  include_dirs = [ "${inputmethod_path}/common/include" ]
  sources = [ "src/ime_enabled_info_manager_test.cpp" ]

  configs = [ ":module_private_config" ]
  deps = [
    "${inputmethod_path}/services:inputmethod_service_static",
    "${inputmethod_path}/services/adapter/settings_data_provider:settings_data_static",
    "${inputmethod_path}/services/json:imf_json_static",
    "${inputmethod_path}/test/unittest/cpp_test/common:inputmethod_tdd_util",
  ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "resource_management:global_resmgr",
  ]
  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
}
